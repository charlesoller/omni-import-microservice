// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: countries.sql

package db

import (
	"context"
)

const upsertCountry = `-- name: UpsertCountry :one
INSERT INTO countries (
  iso_3166_1, name
) VALUES (
  $1, $2
)
ON CONFLICT (iso_3166_1) DO UPDATE SET
  name = EXCLUDED.name
RETURNING iso_3166_1, name
`

type UpsertCountryParams struct {
	Iso31661 string `json:"iso_3166_1"`
	Name     string `json:"name"`
}

func (q *Queries) UpsertCountry(ctx context.Context, arg UpsertCountryParams) (Country, error) {
	row := q.queryRow(ctx, q.upsertCountryStmt, upsertCountry, arg.Iso31661, arg.Name)
	var i Country
	err := row.Scan(&i.Iso31661, &i.Name)
	return i, err
}

const upsertCountryISO = `-- name: UpsertCountryISO :one
INSERT INTO countries (
  iso_3166_1
) VALUES (
  $1
)
ON CONFLICT (iso_3166_1) DO NOTHING
RETURNING iso_3166_1, name
`

func (q *Queries) UpsertCountryISO(ctx context.Context, iso31661 string) (Country, error) {
	row := q.queryRow(ctx, q.upsertCountryISOStmt, upsertCountryISO, iso31661)
	var i Country
	err := row.Scan(&i.Iso31661, &i.Name)
	return i, err
}
