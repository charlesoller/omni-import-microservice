// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_production_companies.sql

package db

import (
	"context"
)

const upsertMovieProductionCompany = `-- name: UpsertMovieProductionCompany :one
INSERT INTO movie_production_companies (
  movie_id, company_id
) VALUES (
  $1, $2
)
ON CONFLICT (movie_id, company_id) DO UPDATE SET
  movie_id = EXCLUDED.movie_id,  
  company_id = EXCLUDED.company_id
RETURNING movie_id, company_id
`

type UpsertMovieProductionCompanyParams struct {
	MovieID   int32 `json:"movie_id"`
	CompanyID int32 `json:"company_id"`
}

func (q *Queries) UpsertMovieProductionCompany(ctx context.Context, arg UpsertMovieProductionCompanyParams) (MovieProductionCompany, error) {
	row := q.queryRow(ctx, q.upsertMovieProductionCompanyStmt, upsertMovieProductionCompany, arg.MovieID, arg.CompanyID)
	var i MovieProductionCompany
	err := row.Scan(&i.MovieID, &i.CompanyID)
	return i, err
}
