// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: credits_cast_member.sql

package db

import (
	"context"
)

const upsertCreditCastMember = `-- name: UpsertCreditCastMember :one
INSERT INTO credits_cast_member (
  credit_id, cast_id
) VALUES (
  $1, $2
)
ON CONFLICT (credit_id, cast_id) DO UPDATE SET
  credit_id = EXCLUDED.credit_id,  
  cast_id = EXCLUDED.cast_id
RETURNING credit_id, cast_id
`

type UpsertCreditCastMemberParams struct {
	CreditID int32 `json:"credit_id"`
	CastID   int32 `json:"cast_id"`
}

func (q *Queries) UpsertCreditCastMember(ctx context.Context, arg UpsertCreditCastMemberParams) (CreditsCastMember, error) {
	row := q.queryRow(ctx, q.upsertCreditCastMemberStmt, upsertCreditCastMember, arg.CreditID, arg.CastID)
	var i CreditsCastMember
	err := row.Scan(&i.CreditID, &i.CastID)
	return i, err
}
