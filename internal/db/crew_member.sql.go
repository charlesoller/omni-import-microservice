// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: crew_member.sql

package db

import (
	"context"
)

const upsertCrewMember = `-- name: UpsertCrewMember :one
INSERT INTO crew_members (
    id, credit_id, department, job, gender, adult, known_for_department,
    name, original_name, popularity, profile_path
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
ON CONFLICT (id) DO UPDATE SET
    department = EXCLUDED.department,
    job = EXCLUDED.job,
    gender = EXCLUDED.gender,
    adult = EXCLUDED.adult,
    known_for_department = EXCLUDED.known_for_department,
    name = EXCLUDED.name,
    original_name = EXCLUDED.original_name,
    popularity = EXCLUDED.popularity,
    profile_path = EXCLUDED.profile_path
RETURNING id
`

type UpsertCrewMemberParams struct {
	ID                 int32   `json:"id"`
	CreditID           string  `json:"credit_id"`
	Department         string  `json:"department"`
	Job                string  `json:"job"`
	Gender             int16   `json:"gender"`
	Adult              bool    `json:"adult"`
	KnownForDepartment string  `json:"known_for_department"`
	Name               string  `json:"name"`
	OriginalName       string  `json:"original_name"`
	Popularity         float64 `json:"popularity"`
	ProfilePath        string  `json:"profile_path"`
}

func (q *Queries) UpsertCrewMember(ctx context.Context, arg UpsertCrewMemberParams) (int32, error) {
	row := q.queryRow(ctx, q.upsertCrewMemberStmt, upsertCrewMember,
		arg.ID,
		arg.CreditID,
		arg.Department,
		arg.Job,
		arg.Gender,
		arg.Adult,
		arg.KnownForDepartment,
		arg.Name,
		arg.OriginalName,
		arg.Popularity,
		arg.ProfilePath,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
