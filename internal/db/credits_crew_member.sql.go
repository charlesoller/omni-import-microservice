// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: credits_crew_member.sql

package db

import (
	"context"
)

const upsertCreditCrewMember = `-- name: UpsertCreditCrewMember :one
INSERT INTO credits_crew_member (
  credit_id, crew_id
) VALUES (
  $1, $2
)
ON CONFLICT (credit_id, crew_id) DO UPDATE SET
  credit_id = EXCLUDED.credit_id,  
  crew_id = EXCLUDED.crew_id
RETURNING credit_id, crew_id
`

type UpsertCreditCrewMemberParams struct {
	CreditID int32 `json:"credit_id"`
	CrewID   int32 `json:"crew_id"`
}

func (q *Queries) UpsertCreditCrewMember(ctx context.Context, arg UpsertCreditCrewMemberParams) (CreditsCrewMember, error) {
	row := q.queryRow(ctx, q.upsertCreditCrewMemberStmt, upsertCreditCrewMember, arg.CreditID, arg.CrewID)
	var i CreditsCrewMember
	err := row.Scan(&i.CreditID, &i.CrewID)
	return i, err
}
