// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package db

import (
	"context"
)

const upsertCollection = `-- name: UpsertCollection :one
INSERT INTO collections (
  id, name, poster_path, backdrop_path
) VALUES (
  $1, $2, $3, $4
)
ON CONFLICT (id) DO UPDATE SET
  name = EXCLUDED.name,
  backdrop_path = EXCLUDED.backdrop_path,
  poster_path = EXCLUDED.poster_path
RETURNING id, name, poster_path, backdrop_path
`

type UpsertCollectionParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	PosterPath   string `json:"poster_path"`
	BackdropPath string `json:"backdrop_path"`
}

func (q *Queries) UpsertCollection(ctx context.Context, arg UpsertCollectionParams) (Collection, error) {
	row := q.queryRow(ctx, q.upsertCollectionStmt, upsertCollection,
		arg.ID,
		arg.Name,
		arg.PosterPath,
		arg.BackdropPath,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PosterPath,
		&i.BackdropPath,
	)
	return i, err
}
