// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_genres.sql

package db

import (
	"context"
)

const upsertMovieGenre = `-- name: UpsertMovieGenre :one
INSERT INTO movie_genres (
  movie_id, genre_id
) VALUES (
  $1, $2
)
ON CONFLICT (movie_id, genre_id) DO UPDATE SET
  movie_id = EXCLUDED.movie_id,  
  genre_id = EXCLUDED.genre_id
RETURNING movie_id, genre_id
`

type UpsertMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) UpsertMovieGenre(ctx context.Context, arg UpsertMovieGenreParams) (MovieGenre, error) {
	row := q.queryRow(ctx, q.upsertMovieGenreStmt, upsertMovieGenre, arg.MovieID, arg.GenreID)
	var i MovieGenre
	err := row.Scan(&i.MovieID, &i.GenreID)
	return i, err
}
