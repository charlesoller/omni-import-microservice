// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie_countries.sql

package db

import (
	"context"
)

const upsertMovieCountry = `-- name: UpsertMovieCountry :one
INSERT INTO movie_countries (
  movie_id, country_id
) VALUES (
  $1, $2
)
ON CONFLICT (movie_id, country_id) DO UPDATE SET
  movie_id = EXCLUDED.movie_id,  
  country_id = EXCLUDED.country_id
RETURNING movie_id, country_id
`

type UpsertMovieCountryParams struct {
	MovieID   int32  `json:"movie_id"`
	CountryID string `json:"country_id"`
}

func (q *Queries) UpsertMovieCountry(ctx context.Context, arg UpsertMovieCountryParams) (MovieCountry, error) {
	row := q.queryRow(ctx, q.upsertMovieCountryStmt, upsertMovieCountry, arg.MovieID, arg.CountryID)
	var i MovieCountry
	err := row.Scan(&i.MovieID, &i.CountryID)
	return i, err
}
